@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@using CloudPanel

@{
    Layout = "__master.cshtml";
    var companyCode = this.RenderContext.Context.GetCompanyCode();
    var isExchangeEnabled = CloudPanel.CPStaticHelpers.IsExchangeEnabled(companyCode);
}

@section HEAD{
<link href="~/Content/plugins/charts-morrisjs/morris.css" rel="stylesheet" />
}

<div id="page-heading">
    <ol class="breadcrumb">
        <li><a href="~/dashboard">Dashboard</a></li>
        <li class="active">@this.RenderContext.Context.GetCompanyName()</li>
    </ol>

    <h1>@Model.company.CompanyName</h1>
</div>

<div class="container">
    <div class="row">
        <!-- Company Info -->
        <form id="overviewForm" class="form-horizontal" action="" method="post" data-parsley-validate>
            <input type="hidden" name="_method" value="PUT" />
            <div class="col-md-8">
                <div class="panel panel-primary">
                    <div class="panel-heading">Company Information</div>
                    <div class="panel-body">
                        <p>Information on your company</p>
                        <div class="form-group">
                            <label for="focusedinput" class="col-sm-3 control-label">Company Name</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="CompanyName" name="CompanyName" value="@Model.company.CompanyName" data-parsley-required="true">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="focusedinput" class="col-sm-3 control-label">Point of Contact</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="AdminName" name="AdminName" value="@Model.company.AdminName" data-parsley-required="true">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="focusedinput" class="col-sm-3 control-label">Email for Point of Contact</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="AdminEmail" name="AdminEmail" value="@Model.company.AdminEmail" data-parsley-required="true" data-parsley-type="email">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="focusedinput" class="col-sm-3 control-label">Telephone</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" value="@Model.company.PhoneNumber">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="focusedinput" class="col-sm-3 control-label">Website</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="Website" name="Website" value="@Model.company.Website" data-parsley-type="url">
                            </div>
                        </div>
                        @if (this.RenderContext.Context.IsSuperOrResellerAdmin()) { 
                            <div class="form-group">
                                <label for="focusedinput" class="col-sm-3 control-label">Company Plan</label>
                                <div class="col-sm-6">
                                    @CloudPanel.CPHtmlHelpers.GetCompanyPlans(Model.company.OrgPlanID, "")
                                </div>
                            </div>
                        }
                    </div>
                    <div class="panel-footer">
                        <div class="col-sm-12 text-right">
                            <div class="btn-toolbar">
                                <button class="btn-primary btn" type="submit">Save</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <!-- Chart -->
        <div class="col-md-4">
            <div class="panel panel-primary">
                <div class="panel-heading">Company Limits</div>
                <div class="panel-body">
                    <div class="col-xs-12">
                        <p>Details on how close your company is to the limit.</p>
                        <div class="tab-content">
                             <div class="tab-pane active" id="domcontext">
                                <div class="contextual-progress">
                                    <div class="clearfix">
                                        <div class="progress-title">Users</div>
                                        <div class="progress-percentage _users">@Model.totalUsers / @Model.companyPlan.MaxUsers</div>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar progress-bar-info _users" style="width: @((int)(0.5f + ((100f * Model.totalUsers) / Model.companyPlan.MaxUsers)))%"></div>
                                    </div>
                                </div> <!-- Users -->
                                <div class="contextual-progress">
                                    <div class="clearfix">
                                        <div class="progress-title">Domains</div>
                                        <div class="progress-percentage _domains">@Model.totalDomains / @Model.companyPlan.MaxDomains</div>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar progress-bar-primary _domains" style="width: @((int)(0.5f + ((100f * Model.totalDomains) / Model.companyPlan.MaxDomains)))%"></div>
                                    </div>
                                </div> <!-- Domains -->
                                 @if (isExchangeEnabled) {
                                    <div class="contextual-progress">
                                        <div class="clearfix">
                                            <div class="progress-title">Mailboxes</div>
                                            <div class="progress-percentage _mailboxes">@Model.totalMailboxes / @Model.companyPlan.MaxExchangeMailboxes</div>
                                        </div>
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-warning _mailboxes" style="width: @((int)(0.5f + ((100f * Model.totalMailboxes) / Model.companyPlan.MaxExchangeMailboxes)))%"></div>
                                        </div>
                                    </div> <!-- Mailboxes -->
                                    <div class="contextual-progress">
                                        <div class="clearfix">
                                            <div class="progress-title">Contacts</div>
                                            <div class="progress-percentage _contacts">@Model.totalContacts / @Model.companyPlan.MaxExchangeContacts</div>
                                        </div>
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-danger _contacts" style="width: @((int)(0.5f + ((100f * Model.totalContacts) / Model.companyPlan.MaxExchangeContacts)))%"></div>
                                        </div>
                                    </div> <!-- Contacts -->
                                    <div class="contextual-progress">
                                        <div class="clearfix">
                                            <div class="progress-title">Distribution Groups</div>
                                            <div class="progress-percentage _groups">@Model.totalGroups / @Model.companyPlan.MaxExchangeDistLists</div>
                                        </div>
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-success _groups" style="width: @((int)(0.5f + ((100f * Model.totalGroups) / Model.companyPlan.MaxExchangeDistLists)))%"></div>
                                        </div>
                                    </div> <!-- Distribution Groups -->
                                    <div class="contextual-progress">
                                        <div class="clearfix">
                                            <div class="progress-title">ActiveSync Plans</div>
                                            <div class="progress-percentage _groups">@Model.totalActiveSync / @Model.companyPlan.MaxExchangeActivesyncPolicies</div>
                                        </div>
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-info _activesync" style="width: @((int)(0.5f + ((100f * Model.totalActiveSync) / Model.companyPlan.MaxExchangeActivesyncPolicies)))%"></div>
                                        </div>
                                    </div> <!-- ActiveSync Plans -->
                                 }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-footer"></div>
            </div>
        </div>
    </div>

    <div class="row">
        @if (isExchangeEnabled) {
            <div class="col-md-12">
                <div class="panel panel-info">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-12 clearfix">
                                <h4 class="pull-left" style="margin: 0 0 20px;">Message History</h4>
                                <div class="btn-group pull-right">
                                    <a href="javascript:GetMessageLogHistory(7);" class="btn btn-default btn-sm">7 Days</a>
                                    <a href="javascript:GetMessageLogHistory(14);" class="btn btn-default btn-sm">14 Days</a>
                                    <a href="javascript:GetMessageLogHistory(31);" class="btn btn-default btn-sm">31 Days</a>
                                    <a href="javascript:GetMessageLogHistory(180);" class="btn btn-default btn-sm">180 Days</a>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div id="messageLogChart" style="height:250px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section JAVASCRIPT{
    <script src="~/Content/plugins/charts-highcharts/js/highcharts.js"></script>
    <script src="~/Content/plugins/moment/moment-with-locales.js"></script>
    <script type="text/javascript">
        var isExchangeEnabled = @isExchangeEnabled.ToString().ToLower();

        $(document).ready(function () {
            $("#overviewForm").submit(function (event) {
                event.preventDefault();
                var data = $("#overviewForm").serialize();

                $.blockUI();
                $.ajax({
                    type: "PUT",
                    data: data
                }).done(function () {
                    ShowSuccess("Successfully updated company");
                    window.location.href = window.location.href;
                }).fail(function (returnData) {
                    ShowError(returnData);
                }).always(function () {
                    $.unblockUI();
                });;
            });

            if (isExchangeEnabled) {
                GetMessageLogHistory(7);
            }
        });

        function GetMessageLogHistory(pastDays) {
            $.getJSON("@Url.Content("~/company/"+companyCode+"/overview/exchange/messagelog/")" + pastDays, function (data) {
                var GB = 1073741824;
                var MB = 1048576;
                var KB = 1024;

                var line = new Highcharts.Chart({
                    chart: { type: 'line', renderTo: 'messageLogChart' },
                    title: { text: '' },
                    xAxis: {
                        type: 'datetime'
                    },
                    yAxis: [{
                        min: 0,
                        title: ''
                    }, {
                        min: 0,
                        title: '',
                        opposite: true,
                        labels: {
                            formatter: function () {
                                var maxElement = this.axis.max;
                                if (maxElement >= GB) {
                                    return (this.value / GB).toFixed(1) + " GB";
                                } else if (maxElement >= MB) {
                                    return (this.value / MB).toFixed(1) + " MB";
                                } else if (maxElement >= KB) {
                                    return (this.value / KB).toFixed(1) + " KB";
                                } else {
                                    return (this.value) + " B";
                                }
                            }
                        }
                    }],
                    tooltip: { shared: true },
                    credits: { enabled: false }
                });

                var totalSent = [], totalReceived = [], totalBytesSent = [], totalBytesReceived = [];
                $.each(data, function (i, val) {
                    if (val.retrieved.length) {
                        var check = moment(val.retrieved, 'YYYY/MM/DD');
                        totalSent.push([check.valueOf(), val.totalSent]);
                        totalReceived.push([check.valueOf(), val.totalReceived]);
                        totalBytesSent.push([check.valueOf(), val.totalBytesSent]);
                        totalBytesReceived.push([check.valueOf(), val.totalBytesReceived]);
                    }
                });

                line.addSeries({ name: "Total Sent", data: totalSent, yAxis: 0 });
                line.addSeries({ name: "Total Received", data: totalReceived, yAxis: 0 });
                line.addSeries({ name: "Total Bytes Sent", data: totalBytesSent, yAxis: 1 });
                line.addSeries({ name: "Total Bytes Received", data: totalBytesReceived, yAxis: 1 });

                line.redraw();
            });
        }
</script>
}